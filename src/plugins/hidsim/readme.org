* hidsim
This plugin provides functionality to inject events of human-interface devices (HID) into the Xen guest under investigation by utilizing the [[https://wiki.qemu.org/Documentation/QMP][QEMU machine protocol (QMP)]].
It can either replay pre-recorded and normalized HID-events -- evdev-events to be more specifically --, which were gathered by the tool [[file:../../helpers/hiddump/][src/helpers/hiddump]] or simulate random mouse movements.

** Usage
To run the plugin and inject random mouse movements, use ~-a hidsim~ with no further options.
If you want verbose output, to follow along, what it is doing, use the ~-v~-flag of course.

#+BEGIN_SRC
sudo ./src/drakvuf -r <ISF-file.json> -d <domID> -a hidsim -v
#+END_SRC

To inject pre-recorded evdev-events specified in template-file, use the option ~--hid-template~ and specify the path to the template-file to use:

#+BEGIN_SRC
sudo ./src/drakvuf -r <ISF-file.json> -d <domID> -a hidsim -v --hid-template ../hid-template.bin
#+END_SRC

Note, that this file has to be generated by ~./src/hiddump~. See [[file:./src/drakvuf/src/helpers/hiddump/readme.org][./src/helpers/hiddump/readme.org]] for more infos on that.

** Dependencies
The ~hidsim~-plugin uses pthreads and json-c. Both libaries are hooked into the automake-system.

** Background
As already stated, the injection of HID-events is accomplished by the utilization of Qemu's machine protocol. QMP is a protocol for applications to talk with QEMU and operate a Qemu instance by sending JSON-commands (according to RFC 4627) to its Unix domain socket, which are specified by the QAPI.
~hidsim~ primarily utilizes QMP's command ~send-input-event~ to simulate user input.

*** Exemplary QMP usage to illustrate the inner working
Xen creates Unix domain sockets serving as QMP-endpoint already under ~/run/xen/qmp-libxl-<domID>~.

Alternative you could specify, a specific socket by adding
#+BEGIN_SRC shell
cat << EOF >> /etc/xen/<machine.cfg>
heredoc> # Specify QMP Socket
device_model_args = [
    "-chardev",
    "socket,id=win7-sock-qmp,path=/run/xen/win7-sock-qmp,server,nowait",
    "-mon",
    "chardev=win7-sock-qmp,mode=control"
]
EOF
#+END_SRC

To manually test QMP, one can connect to the Unix domain socket with netcat or telnet:

#+BEGIN_SRC shell
# Open connection to Unix domain socket for QMP connection
sudo nc -U /run/xen/qmp-libxl-1

# Negotiate QMP capabilities
{ "execute": "qmp_capabilities" }

# Utilize input-send-event to move mouse
{
   "execute":"input-send-event",
   "arguments":{
      "events":[
	 {
	    "type":"abs",
	    "data":{
	       "axis":"x",
	       "value":32000
	    }
	 },
	 {
	    "type":"abs",
	    "data":{
	       "axis":"y",
	       "value":31000
	    }
	 }
      ]
   }
}
# Send ctrl-alt-delete
{
   "execute":"input-send-event",
   "arguments":{
      "events":[
	 {
	    "type":"key",
	    "data":{
	       "down":true,
	       "key":{
		  "type":"qcode",
		  "data":"ctrl"
	       }
	    }
	 },
	 {
	    "type":"key",
	    "data":{
	       "down":true,
	       "key":{
		  "type":"qcode",
		  "data":"alt"
	       }
	    }
	 },
	 {
	    "type":"key",
	    "data":{
	       "down":true,
	       "key":{
		  "type":"qcode",
		  "data":"delete"
	       }
	    }
	 }
      ]
   }
}
#+END_SRC
